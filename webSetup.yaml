Parameters:
  NameOfService:
    Description: "Enter the name of the service this stack is to be used for."
    Type: String
  InstanceTypeParameter:
    Description: Enter t2.nano, t2.micro, t2.small, t3.nano, t3.micro, or t3.small. Default is t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t3.nano
      - t3.micro
      - t3.small
  KeyNameParameter:
    Description: EC2 login key
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  AmiRegionMap:
    us-east-1:
      AMI: "ami-0df8c184d5f6ae949"  # Amazon Linux 2023
    us-west-1:
      AMI: "ami-0118dc74bd8f98b13"
    eu-central-1:
      AMI: "ami-0cdd6d7420844683b"

Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            dnf:
              httpd: []
              wget: []
              unzip: []
              git: []
          commands:
            enable_php:
              command: |
                amazon-linux-extras enable php8.0
                dnf install -y php
            deploy:
              command: |
                wget https://www.tooplate.com/zip-templates/2136_kool_form_pack.zip
                unzip 2136_kool_form_pack.zip
                cp -r 2136_kool_form_pack/* /var/www/html/
          files:
            /var/www/html/hello.html:
              content: !Sub |
                <!DOCTYPE html>
                <html>
                <body>
                <h1>CloudFormation Stack Init Deploy</h1>
                </body>
                </html>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyNameParameter
      ImageId: !FindInMap
        - AmiRegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - !Ref NameOfService
              - !Ref "AWS::Region"
      SecurityGroups:
        - !Ref exampleSG
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrap is installed
            dnf install -y aws-cfn-bootstrap
            # Run cfn-init to apply metadata configuration
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
  exampleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH & HTTP from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

Outputs:
  PrintInfo:
    Value: !GetAtt
      - WebServer
      - PublicDnsName